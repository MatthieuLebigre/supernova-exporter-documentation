{[ let page = context /]}
{[ let group = page.parent /]}
{[ let groupIsTabContainer = (group.groupBehavior === "Tabs") /]}
{[ let pageConfiguration = (groupIsTabContainer ? group.configuration : page.configuration) /]}
{[ let domain = ds.documentationDomain() /]}
{[ let configuration = exportConfiguration() /]}
{[ let shouldShowTabbar = ds.documentationConfiguration().settings.tabbedNavigation /]}
{[ let designSystem = ds.documentationConfiguration().version.designSystem /]}
{[ let rootGroup = ds.rootDocumentationGroup() /]}

<!-- Header --> 
<header id="header" class="sticky-top {{ ((configuration.topNavigationStyle === "Dark") ? "style-dark" : "style-light")}}"> 
    
    <!-- Navbar -->
    <nav class="primary-menu navbar navbar-expand-lg">
        <div class="logo-wrapper">
            {[ inject "component_site_logo" context page /]}

            {[ if designSystem.designSystemSwitcher.isEnabled ]}
                {[ let dsSwitcher = ds.currentDesignSystemSwitcher() /]}

                <div class="dropdown">
                    <button class="btn-icon-button" id="design-systems-switcher" aria-label="Switch design system" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> 
                        {[ inject "icon_selector" context configuration /]}
                    </button>
                    <div class="dropdown-menu pull-left" aria-labelledby="design-systems-switcher">
                        {[ for dsInfo in dsSwitcher.designSystems ]}
                            {[ let isCurrent = dsInfo.isCurrent /]}
                            <a class="dropdown-item{{isCurrent ? " is-active": ""}}" href="{{ removeVersionFromDomainUrl(domain) }}/ds-switch/{{ dsInfo.id }}?page_path=/{{ page.relativeUrl }}">
                                {{ dsInfo.name }}
                                {[ if isCurrent ]}
                                    {[ inject "icon_check" context configuration /]}
                                {[/]}
                            </a>
                        {[/]}
                    </div>
                </div>
            {[/]}
        </div>
        
        <div class="container-fluid">

            {* Potential Left Link Here *}
            <div id="header-nav" class="navbar-collapse">
                <ul class="navbar-nav">
                    {[ if shouldShowTabbar ]}
                        {[ for item in rootGroup.children ]}
                            {* Only show if group or page is not hidden *}
                            {[ if isExportable(item) ]}
                                {[ let activeClass = (pageOrGroupActiveInContext(page, item) === true ? "active" : "") /]}
                                {[ let itemTitle = resolveMenuLabel(item, rootGroup, configuration.navigationOverrideHomepageLabel) /]}
                            
                                <li><a class="typographyDocsViewNavigation {{ activeClass }}" href="{{ pageUrl(item, ds.documentationDomain()) }}">{{ itemTitle }}</a></li>
                            {[/]}
                        {[/]}
                    {[/]}
                </ul>

                <div class="utility-nav">

                    {[ if shouldShowTabbar ]}
                    <div id="mobile-menu-container" class="dropdown">
                        <button class="btn btn-secondary btn-outlined" type="button" id="mobile-menu-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">   
                            
                                {[ for item in rootGroup.children ]}
                                    {* Re-enable if we only want to show groups *}
                                    {* {[ if item.type.equals("Group") ]} *}
                                        {[ let isActive = pageOrGroupActiveInContext(page, item) /]}
                                        {[ if isActive ]}
                                            {[ let itemTitle = resolveMenuLabel(item, rootGroup, configuration.navigationOverrideHomepageLabel) /]}
                                            {{ itemTitle }}
                                        {[/]}
                                    {* {[/]} *}
                                {[/]}
                        </button>
                        <div class="dropdown-menu pull-right" aria-labelledby="mobile-menu-selector">
                            {[ for item in rootGroup.children ]}
                                {* Only show if group or page is not hidden *}
                                {[ if isExportable(item) ]}
                                    {[ let activeClass = (pageOrGroupActiveInContext(page, item) === true ? "checked" : "") /]}
                                    {[ let itemTitle = resolveMenuLabel(item, rootGroup, configuration.navigationOverrideHomepageLabel) /]}
                                    <a class="dropdown-item {{ activeClass }}" href="{{ pageUrl(item, ds.documentationDomain()) }}">{{ itemTitle }}</a>
                                {[/]}
                            {[/]}
                        </div>
                    </div>
                    {[/]}
                    {[ if configuration.advancedCustomizationShowVersionDropdown ]}
                    <div id="version-container" class="dropdown">
                        <button class="btn btn-secondary btn-outlined" type="button" id="version-selector" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Loading
                        </button>
                        <div class="dropdown-menu pull-right" aria-labelledby="version-selector">
                        </div>
                    </div>
                    {[/]}
                    {* Start Ubisoft custom (quick links) *}
                    {[ if configuration.topNavigationShowQuickLinks ]}
                        <div class="quick-links">
                        {[ if (configuration.topNavigationQuickLinkUrl1 && ((configuration.topNavigationQuickLinkIcon1 !== null) && (configuration.topNavigationQuickLinkIcon1.assetUrl !== null))) ]}
                            {[ let linkLabel = (configuration.topNavigationQuickLinkAriaLabel1 ? configuration.topNavigationQuickLinkAriaLabel1 : "Open site") /]}
                            {[ let linkUrl = configuration.topNavigationQuickLinkUrl1 /]}
                            <a href="{{ linkUrl }}" class="quick-link" target="blank" aria-label="{{ linkLabel }}">
                                <img src="{{ configuration.topNavigationQuickLinkIcon1.assetUrl }}" alt="{{ linkLabel }}" />
                            </a>
                        {[/]}
                        {[ if (configuration.topNavigationQuickLinkUrl2 && ((configuration.topNavigationQuickLinkIcon2 !== null) && (configuration.topNavigationQuickLinkIcon2.assetUrl !== null))) ]}
                            {[ let linkLabel = (configuration.topNavigationQuickLinkAriaLabel2 ? configuration.topNavigationQuickLinkAriaLabel2 : "Open site") /]}
                            {[ let linkUrl = configuration.topNavigationQuickLinkUrl2 /]}
                            <a href="{{ linkUrl }}" class="quick-link" target="blank" aria-label="{{ linkLabel }}">
                                <img src="{{ configuration.topNavigationQuickLinkIcon2.assetUrl }}" alt="{{ linkLabel }}" />
                            </a>
                        {[/]}
                        {[ if (configuration.topNavigationQuickLinkUrl3 && ((configuration.topNavigationQuickLinkIcon2 !== null) && (configuration.topNavigationQuickLinkIcon3.assetUrl !== null))) ]}
                            {[ let linkLabel = (configuration.topNavigationQuickLinkAriaLabel3 ? configuration.topNavigationQuickLinkAriaLabel3 : "Open site") /]}
                            {[ let linkUrl = configuration.topNavigationQuickLinkUrl3 /]}
                            <a href="{{ linkUrl }}" class="quick-link" target="blank" aria-label="{{ linkLabel }}">
                                <img src="{{ configuration.topNavigationQuickLinkIcon3.assetUrl }}" alt="{{ linkLabel }}" />
                            </a>
                        {[/]}
                        {[ if (configuration.topNavigationQuickLinkUrl4 && ((configuration.topNavigationQuickLinkIcon4 !== null) && (configuration.topNavigationQuickLinkIcon4.assetUrl !== null))) ]}
                            {[ let linkLabel = (configuration.topNavigationQuickLinkAriaLabel4 ? configuration.topNavigationQuickLinkAriaLabel4 : "Open site") /]}
                            {[ let linkUrl = configuration.topNavigationQuickLinkUrl4 /]}
                            <a href="{{ linkUrl }}" class="quick-link" target="blank" aria-label="{{ linkLabel }}">
                                <img src="{{ configuration.topNavigationQuickLinkIcon4.assetUrl }}" alt="{{ linkLabel }}" />
                            </a>
                        {[/]}
                        {[ if (configuration.topNavigationQuickLinkUrl5 && ((configuration.topNavigationQuickLinkIcon5 !== null) && (configuration.topNavigationQuickLinkIcon5.assetUrl !== null))) ]}
                            {[ let linkLabel = (configuration.topNavigationQuickLinkAriaLabel5 ? configuration.topNavigationQuickLinkAriaLabel5 : "Open site") /]}
                            {[ let linkUrl = configuration.topNavigationQuickLinkUrl5 /]}
                            <a href="{{ linkUrl }}" class="quick-link" target="blank" aria-label="{{ linkLabel }}">
                                <img src="{{ configuration.topNavigationQuickLinkIcon5.assetUrl }}" alt="{{ linkLabel }}" />
                            </a>
                        {[/]}
                        </div>
                    {[/]}
                    {* End Ubisoft custom *}
                    {[ if (configuration.searchButtonType === "Icon + label") ]}
                        <button class="btn-icon-button btn-search search expanded" aria-label="Search in documentation">
                            {[ inject "icon_search" context configuration /]} Search...
                        </button>
                    {[ else ]}
                        <button class="btn-icon-button btn-search search" aria-label="Search in documentation">
                            {[ inject "icon_search" context configuration /]}
                        </button>
                    {[/]}
                    {[ if configuration.advancedCustomizationShowCTA ]}
                        {[ let ctaText = (configuration.advancedCustomizationCTAText ? configuration.advancedCustomizationCTAText : "Open site") /]}
                        {[ let ctaUrl = (configuration.advancedCustomizationCTAUrl ? configuration.advancedCustomizationCTAUrl : "") /]}
                        {[ let buttonClass = (ctaUrl.contains("slack.com/") ? "btn-slack" : "btn-primary") /]}
                        {[ let icon = (ctaUrl.contains("slack.com/") ? "<svg xmlns='http://www.w3.org/2000/svg' height='16' width='16' viewBox='0 0 122.8 122.8'><path d='M25.8 77.6c0 7.1-5.8 12.9-12.9 12.9S0 84.7 0 77.6s5.8-12.9 12.9-12.9h12.9v12.9zm6.5 0c0-7.1 5.8-12.9 12.9-12.9s12.9 5.8 12.9 12.9v32.3c0 7.1-5.8 12.9-12.9 12.9s-12.9-5.8-12.9-12.9V77.6z' fill='#e01e5a'></path><path d='M45.2 25.8c-7.1 0-12.9-5.8-12.9-12.9S38.1 0 45.2 0s12.9 5.8 12.9 12.9v12.9H45.2zm0 6.5c7.1 0 12.9 5.8 12.9 12.9s-5.8 12.9-12.9 12.9H12.9C5.8 58.1 0 52.3 0 45.2s5.8-12.9 12.9-12.9h32.3z' fill='#36c5f0'></path><path d='M97 45.2c0-7.1 5.8-12.9 12.9-12.9s12.9 5.8 12.9 12.9-5.8 12.9-12.9 12.9H97V45.2zm-6.5 0c0 7.1-5.8 12.9-12.9 12.9s-12.9-5.8-12.9-12.9V12.9C64.7 5.8 70.5 0 77.6 0s12.9 5.8 12.9 12.9v32.3z' fill='#2eb67d'></path><path d='M77.6 97c7.1 0 12.9 5.8 12.9 12.9s-5.8 12.9-12.9 12.9-12.9-5.8-12.9-12.9V97h12.9zm0-6.5c-7.1 0-12.9-5.8-12.9-12.9s5.8-12.9 12.9-12.9h32.3c7.1 0 12.9 5.8 12.9 12.9s-5.8 12.9-12.9 12.9H77.6z' fill='#ecb22e'></path></svg>" : "") /]}

                        <a href="{{ ctaUrl }}" class="btn cta-button {{ buttonClass }}" id="cta-button" {{ configuration.advancedCustomizationOpenInNewTab ? " target='blank'" : "" }}>
                        {{icon}}{{ ctaText }}
                        </a>
                    {[/]}
                </div>        
             </div>
        </div>

         <!-- Sidebar Toggler -->
        {[ if pageConfiguration.showSidebar ]}
            <button id="sidebarCollapse" class="toggle-navbar" type="button" aria-label="Open navigation">
                {[ inject "icon_menu" context configuration /]}
            </button>
        {[/]}
    </nav>
</header>
<!-- Header End -->